#!/bin/bash

function fzfx()
{
    fzf | xargs "$@"
}

function g_mgnf_in_d_then_pu() {
  cbr=$(git cbr)

  git cod && git mgnf "$cbr" && git pu
}

function g_mgnf_in_d_then_pu_and_come_back() {
  cbr=$(git cbr)

  git cod && git mgnf "$cbr" && git pu && git co "$cbr"
}

function fmtx() {
  CLANG_FORMAT="/usr/local/bin/clang-format"

  find $@ \( -name '*.h' -or -name '*.m' -or -name '*.mm' \) -print0 | xargs -0 "$CLANG_FORMAT" -i
}

# present a project selector and change to the selected directory
function cdpj()
{
  cdpjx $PROJ_ROOT 4
}

function cdgo()
{
  cdpjx $GOPATH 6
}

function cdpjx()
{
  base=${1:-$PROJ_ROOT}
  maxdepth=${2:-4}

  if [ -z "$base" ]; then
    echo >&2 "error: PROJ_ROOT must be set or a base directory passed as the first argument"
    return 1
  fi

  findopts=(-type d -maxdepth $maxdepth)
  excludes='.cocoapods|.vim/bundle'
  
  dir=$(
    find -H $base ${findopts[*]} -path '*/.git' 2>/dev/null \
      | sed 's,/.git$,,' \
      | grep -vE "$excludes" \
      | xargs -I{} stat -f '%m %N' '{}' | sort -nr \
      | sed -E 's,^[0-9]+ ,,' \
      | sed -E "s,^$base/(src/)?,," \
      | pick
  )

  # after selecting a project, expand it back out to its full path and jump to it
  if [ -n "$dir" ]; then
    dest=$base/$dir
    if [ ! -d "$dest" ]; then
      dest=$base/src/$dir
    fi
    touch "$dest" && cd "$dest"
  fi
}

# print the last touched file in this directory
function lf()
{
  ls -t $@ | grep -v '^total' | head -1
}

# edit the last touched file with EDITOR
function elf()
{
  [ "x$EDITOR" != "x" ] && $EDITOR "$(lf)"
}

function xc() {
  xcpath=$(dirname $(dirname $(xcode-select -p)))
  open -a "$xcpath" $@
}

function xc2() {
  xcpath=$(dirname $(dirname $(xcode-select -p)))
  open -a "$xcpath" $@
}

# open in Xcode
function xc1()
{
  if test -n "$(find $@ -maxdepth 1 -name '*.xcworkspace' -print -quit)"
  then
    echo "Opening workspace"
    open *.xcworkspace
    return
  else
    if test -n "$(find $@ -maxdepth 1 -name '*.xcodeproj' -print -quit)"
    then
      echo "Opening project"
      open *.xcodeproj
      return  
    else
      echo "Nothing found"
    fi
  fi
}

# start a new scratch project
function scratch()
{
  if [ $# = 0 ]; then
    echo "fatal: no project name provided" >&2
    return 1
  fi

  scratch_dir="${HOME}/src/scratch/$1"
  git init "${scratch_dir}"
  cd "${scratch_dir}"
}
